#include "Movie_Vertex.h"

#include <iostream>

using namespace std;

void heapify(Movie_Vertex * arr, int x, int j);
void createHeap(Movie_Vertex * arr, int x);
vector<Movie_Vertex*> findRatingBDS(Movie_Vertex* arr, double min, double max);

int main() {
  vector < Movie_Vertex > ex;
  for (int i = 0; i < 20; i++) {
    string movie = "Movie ";
    Movie_Vertex a(movie.append(to_string(i + 1)), "Horror", 1 + ((double) rand() / RAND_MAX) * 9);
    ex.push_back(a);
  }

  Movie_Vertex * arr[ex.size()];
  for (int i = 0; i < ex.size(); i++) {
    arr[i] = & ex.at(i);
  }


  for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {
    cout << arr[i] -> getTitle() << " ";
  }
  
  createHeap( * arr, 10);
  cout << " HEAP CREATED " << endl;


findRatingBDS(*arr, 2.3, 5);
cout << endl << endl;
  for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {
   cout << arr[i] -> getTitle() << " ";
  }

  return 0;
}

void heapify(Movie_Vertex * arr, int x, int j) {
  int max = j;
  int left = 2 * j + 1;
  int right = 2 * j + 2;
  if (arr[left].getRating() > arr[max].getRating() && left < x) {
    max = left;
  }
  if (arr[right].getRating() > arr[max].getRating() && right < x) {
    max = right;
  }
  if (max != j) {
    swap(arr[j], arr[max]);
    heapify(arr, x, max);
  }
}

void createHeap(Movie_Vertex * arr, int x) {
  int firstIndex = (x / 2) - 1;
  for (int j = firstIndex; j >= 0; j--) {
    heapify(arr, x, j);
  }
}


vector<Movie_Vertex*> findRatingBDS(Movie_Vertex* arr, double min, double max) {
    vector<Movie_Vertex*> checkedVerts;
    vector<Movie_Vertex*> queuedVerts;
    vector<Movie_Vertex*> matches;

    checkedVerts.push_back(&arr[0]);
    queuedVerts.push_back(&arr[0]);

    cout << "Traversing... ";
    while (queuedVerts.size() > 0)
    {
        // Pull movie vertex to be checked
        Movie_Vertex* vert = queuedVerts[0];
        // Remove it from vector of vertices to check
        queuedVerts.erase(queuedVerts.begin());
        cout << vert->getTitle() << " ";
        
        int idx;
        cout << "SiDSS::: " << sizeof(*arr)/sizeof(&arr[0]);
        // Get all edges of the currently checked movie vertex
        for(int i = 0; arr[i]; i++)
        {
            cout << arr[i].getTitle() << " : " << vert->getTitle() << endl;
            if(arr[i].getTitle().compare(vert->getTitle()) == 0)
            {
                idx = i;
                break;
            }
        }

            // Determine if the adjacent movie has been traversed before
           bool leftChecked = false;
           bool rightChecked = false;
            for (Movie_Vertex* movie : checkedVerts)
            {
                if (movie->getTitle().compare(arr[idx*2+2].getTitle()) == 0)
                {
                    rightChecked = true;
                }
                if(movie->getTitle().compare(arr[idx*2+1].getTitle()) == 0)
                {
                    leftChecked = true;
                }
            }
            
            // Add this adjacent movie vertex to be checked since it hasn't been traversed
            if (!rightChecked)
            {
                checkedVerts.push_back(&arr[idx*2+2]);
                queuedVerts.push_back(&arr[idx*2+2]);
            }
            if(!leftChecked)
            {
                checkedVerts.push_back(&arr[idx*2+1]);
                queuedVerts.push_back(&arr[idx*2+1]);
            }

        cout << "SIZE: " << queuedVerts.size() << endl;
        if (vert->getRating() <= max && vert->getRating() >= min)
        {
            cout << " Match Found!" << endl;
            matches.push_back(vert);
        }
    }
    
    return matches; 
}